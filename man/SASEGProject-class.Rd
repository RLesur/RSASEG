% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SASEGS4.R
\docType{class}
\name{SASEGProject-class}
\alias{SASEGProject-class}
\alias{saveAs,SASEGProject-method}
\alias{newCode,SASEGProject-method}
\title{An S4 class to represent a SAS EG Project object}
\usage{
\S4method{saveAs}{SASEGProject}(object, filepath, ...)

\S4method{newCode}{SASEGProject}(project, server = NULL, program = NULL,
  name = NULL, ...)
}
\arguments{
\item{filepath}{A character string with the path to the file project, \code{NULL} by default.
\strong{Be careful: \code{saveAs()} method overwrites existing files without confirmation.}}

\item{project}{A \code{SASEGProject} object.}

\item{server}{A character string with the server name.}

\item{program}{A character string with the \code{SAS} code of the program.
Optional, \code{NULL} by default.}

\item{name}{A character string with the name of the program. Optional, \code{NULL} by default.}
}
\description{
The \code{SASEGProject} class is an S4 class to represent a \code{SAS EG Scripting Project} object.
}
\section{Constructor}{

There is no constructor. To generate a \code{SASEGProject} object, you have to call the \code{SASEGApplication} method \code{newProject()}.
}

\examples{
\dontrun{
# Modify the path below following your install:
path <- "C:/Program Files/SAS94/SASEnterpriseGuide/7.1/SASEGScripting.dll"
loadSASEGScripting(path)
app <- SASEGApplication()

my_profile <- "PROFILE"
setProfile(app, my_profile)

my_new_project <- newProject(app)

my_server <- "SASPROD"
sas_program <- "data a; set sashelp.class; run;"
program_name <- "Test RSASEG"
my_new_code <- newCode(my_new_project,
                       my_server,
                       sas_program,
                       program_name)
saveAs(my_new_project, "~/RSASEG.egp")

# Important: you have to quit SAS EG Application
terminate(app)
}
}
\seealso{
\code{\linkS4class{SASEGApplication}}, \code{\linkS4class{SASEGCode}}
}
